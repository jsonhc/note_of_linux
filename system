以cpu为排序找出占用cpu率高的线程:
~$ ps H -eo user,pid,ppid,tid,time,%cpu,cmd --sort=%cpu

查出消耗cpu资源最多的前十的进程:
wadeson@wadeson-Inspiron-7460:/tmp$ ps auxw|head -1;ps auxw|sort -rnk3|head -11

查出消耗内存资源最多的前十的进程:
wadeson@wadeson-Inspiron-7460:/tmp$ ps auxw|head -1;ps auxw|sort -rnk4|head -11

虚拟内存使用最多的前十进程:
wadeson@wadeson-Inspiron-7460:/tmp$ ps auxw|head -1;ps auxw|sort -rnk5|head -11

以上-n是按照数字大小排序,-r是以相反顺序,-k是指定需要排序的列

其中VSZ表示进程所使用的虚拟内存的大小
RSS表示进程使用的驻留集大小或者实际内存的大小

STAT:进程的状态
D:无法中断的休眠状态(通常IO的进程),会大量消耗资源
R:正在运行可中在队列可过行的
S:处于休眠状态
T:停止或被追踪
W:进行内存交换,从内核2.6开始无效
X:死掉的进程
Z:僵尸进程,也会消耗大量资源
<:优先级高的进程
N:优先级较低的进程
L:有些页被锁进内存
s:进程的领导者
l:多线程.克隆线程
+:位于后台的进程组

使用top查看消耗cpu最高的进程pid,然后通过pid查找到线程:
1.top -Hp pid
2.ps H -eo pid,tid,pcpu,cmd --sort=pcpu|grep pid       #其中tid对应的列就是线程
通过上述得到线程id
通过pstack 线程id  得到堆栈信息
通过strace -p 线程id  得到这个线程的所以系统调用
通过jstack pid|grep -A 10 num 查看堆栈信息
  其中num为进程对应的线程的16进制表示,比如pid为6620,线程id为21233(通过printf打印出16进制的表示就是num这个变量的值)

# 查看某一个进程所打开的文件个数
# ps -ef|grep    获得服务的进程id，pid
# lsof -p pid|wc -l   通过pid来查询打开的文件数

# 查看某一个进程打开的进程数
# ps -ef|grep    获得服务的进程pid
# cd /proc/pid/task && ls |wc -l
